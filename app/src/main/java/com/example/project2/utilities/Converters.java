package com.example.project2.utilities;

/**
 *  Information on type converters
 *  and how to properly do this was
 *  found online through various resources
 *  -Austin
 */

import androidx.room.TypeConverter;

import com.example.project2.Ability;
import com.example.project2.ElementalType;
import com.example.project2.creatures.*;
import com.example.project2.database.AbilityDAO;
import com.example.project2.database.entities.AbilityEntity;
import com.example.project2.database.entities.CreatureEntity;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Converters {
    @TypeConverter
    public String fromElementalTypeList(List<ElementalType> elements) {
        return elements.stream().map(Enum::name).collect(Collectors.joining(","));
    }

    @TypeConverter
    public List<ElementalType> toElementalTypeList(String data) {
        if (data == null || data.isEmpty()) return new ArrayList<>();

        return Arrays.stream(data.split(",")).map(ElementalType::valueOf).collect(Collectors.toList());
    }

    @TypeConverter
    public String fromStringList(List<String> list) {
        return String.join(",", list);
    }

    @TypeConverter
    public List<String> toStringList(String data) {
        if (data == null || data.isEmpty()) return new ArrayList<>();

        return Arrays.asList(data.split(","));
    }

    public static Ability convertEntityToAbility(AbilityEntity entity) {
        return new Ability(
                entity.getAbilityID(),
                entity.getAbilityName(),
                ElementalType.valueOf(entity.getAbilityElement()),
                entity.getPower(),
                entity.getCritChance(),
                entity.getAccuracy()
        );
    }

    public static CreatureEntity convertCreatureToEntity(Creature creature, String userId, int teamSlot, int creatureId) {
        //get ability ids
        List<String> abilityIds = creature.getAbilityList().stream()
                .map(Ability::getAbilityID)
                .collect(Collectors.toList());

        //pulling elemental types from elements list
        List<ElementalType> elements = new ArrayList<>(creature.getElements());


        return new CreatureEntity(
                creatureId, //creatureId will be autogenerated by room if set to 0
                userId,
                creature.getType(),
                creature.getName(),
                creature.getPhrase(),
                creature.isFainted(),
                elements,
                abilityIds,
                creature.getLevel(),
                creature.getCurExperiencePoints(),
                creature.getExperienceNeededToLevel(),
                creature.getCurHealth(),
                creature.getHealthStat(),
                creature.getBaseHealth(),
                creature.getAttackStat(),
                creature.getBaseAttack(),
                creature.getDefenseStat(),
                creature.getBaseDefense(),
                creature.getSpeedStat(),
                creature.getBaseSpeed(),
                creature.getBonusStatTotal(),
                creature.getBonusHealth(),
                creature.getBonusAttack(),
                creature.getBonusDefense(),
                creature.getBonusSpeed(),
                teamSlot
        );
    }

    public static Creature convertEntityToCreature(CreatureEntity entity, AbilityDAO abilityDAO) {
        Creature creature;

        //reconstruct subclass from type field
        switch (entity.getType()) {
            case "ElectricRat":
                creature = new ElectricRat(entity.getName(), entity.getLevel());
                break;
            case "FireLizard":
                creature = new FireLizard(entity.getName(), entity.getLevel());
                break;
            case "FlowerDino":
                creature = new FlowerDino(entity.getName(), entity.getLevel());
                break;
            case "WeirdTurtle":
                creature = new WeirdTurtle(entity.getName(), entity.getLevel());
                break;
            case "CustomCreature":
                creature = new CustomCreature(entity.getName(), entity.getLevel());
            default:
                throw new IllegalArgumentException("creature type not found: " + entity.getType());
        }
        //set ID so it can be preserved
        creature.setCreatureId(entity.getCreatureId());

        //set shared values
        creature.setPhrase(entity.getPhrase());
        creature.setFainted(entity.isFainted());
        creature.setElements(entity.getElements()); // List<ElementalType>
        creature.setCurExperiencePoints(entity.getCurExperiencePoints());
        creature.setExperienceNeededToLevel(entity.getExperienceNeededToLevel());

        //set stats
        creature.setCurHealth(entity.getCurHealth());
        creature.setHealthStat(entity.getHealthStat());
        creature.setAttackStat(entity.getAttackStat());
        creature.setDefenseStat(entity.getDefenseStat());
        creature.setSpeedStat(entity.getSpeedStat());

        //set base stats
        creature.setBaseHealth(entity.getBaseHealth());
        creature.setBaseAttack(entity.getBaseAttack());
        creature.setBaseDefense(entity.getBaseDefense());
        creature.setBaseSpeed(entity.getBaseSpeed());

        //set bonus stats
        creature.setBonusStatTotal(entity.getBonusStatTotal());
        creature.setBonusHealth(entity.getBonusHealth());
        creature.setBonusAttack(entity.getBonusAttack());
        creature.setBonusDefense(entity.getBonusDefense());
        creature.setBonusSpeed(entity.getBonusSpeed());

        // Restore abilities from their IDs
        List<String> abilityIds = entity.getAbilityList();
        if (abilityIds != null) {
            //clear out ability list before adding saved abilities
            creature.getAbilityList().clear();
            //loop through list of ability IDs
            for (String id : abilityIds) {
                //pass each ID into the DAO to retrieve and store it
                AbilityEntity abilityEntity = abilityDAO.getAbilityById(id);
                if (abilityEntity != null) {
                    //pass the retrieved entity into the converter and store it into the creatures abilityList
                    creature.getAbilityList().add(convertEntityToAbility(abilityEntity));
                }
            }
        }

        return creature;
    }
}
